{
	"info": {
		"_postman_id": "250b7096-36d7-4f50-baa5-b50d2470c64b",
		"name": "ProgEdu",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "User",
			"item": [
				{
					"name": "createAccounts",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let base_url = pm.environment.get(\"base_url\");\r",
									"\r",
									"pm.sendRequest( base_url + \"/LoginAuth?username=root&password=rootrootrootroot\", function (err, response) {\r",
									"    console.log(\"pre-request script response.json()\");\r",
									"    console.log(response.json());\r",
									"    let jwt_token = response.json().token;\r",
									"\r",
									"    pm.environment.set(\"jwt_token\", jwt_token);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "/C:/D/245lab/ProgEdu/code/ProgEdu/server/doc/postman-test/StudentTemplateForTest.csv"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/webapi/user/upload?token={{jwt_token}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"user",
								"upload"
							],
							"query": [
								{
									"key": "token",
									"value": "{{jwt_token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "createAccount",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let base_url = pm.environment.get(\"base_url\");\r",
									"\r",
									"pm.sendRequest( base_url + \"/LoginAuth?username=root&password=rootrootrootroot\", function (err, response) {\r",
									"    console.log(\"pre-request script response.json()\");\r",
									"    console.log(response.json());\r",
									"    let jwt_token = response.json().token;\r",
									"\r",
									"    pm.environment.set(\"jwt_token\", jwt_token);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded;application/json",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "postman-test-3",
									"type": "text"
								},
								{
									"key": "username",
									"value": "postman-test-3",
									"type": "text"
								},
								{
									"key": "email",
									"value": "postman-test-3@postman-test-3",
									"type": "text"
								},
								{
									"key": "password",
									"value": "postman-test-3",
									"type": "text"
								},
								{
									"key": "role",
									"value": "student",
									"type": "text"
								},
								{
									"key": "isDisplayed",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/webapi/user/new?token={{jwt_token}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"user",
								"new"
							],
							"query": [
								{
									"key": "token",
									"value": "{{jwt_token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "createAccount(new)(未完成 因依賴AssigmentService)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let base_url = pm.environment.get(\"base_url\");\r",
									"\r",
									"pm.sendRequest( base_url + \"/LoginAuth?username=root&password=rootrootrootroot\", function (err, response) {\r",
									"    console.log(\"pre-request script response.json()\");\r",
									"    console.log(response.json());\r",
									"    let jwt_token = response.json().token;\r",
									"\r",
									"    pm.environment.set(\"jwt_token\", jwt_token);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded;application/json",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "postman-test-4",
									"type": "text"
								},
								{
									"key": "username",
									"value": "postman-test-4",
									"type": "text"
								},
								{
									"key": "email",
									"value": "postman-test-4@postman-test-4",
									"type": "text"
								},
								{
									"key": "password",
									"value": "postman-test-4",
									"type": "text"
								},
								{
									"key": "role",
									"value": "student",
									"type": "text"
								},
								{
									"key": "isDisplayed",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{spring_url}}/user/new",
							"host": [
								"{{spring_url}}"
							],
							"path": [
								"user",
								"new"
							]
						}
					},
					"response": []
				},
				{
					"name": "updatePassword",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let base_url = pm.environment.get(\"base_url\");\r",
									"\r",
									"pm.sendRequest( base_url + \"/LoginAuth?username=root&password=rootrootrootroot\", function (err, response) {\r",
									"    console.log(\"pre-request script response.json()\");\r",
									"    console.log(response.json());\r",
									"    let jwt_token = response.json().token;\r",
									"\r",
									"    pm.environment.set(\"jwt_token\", jwt_token);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded;application/json",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "postman-test",
									"type": "text"
								},
								{
									"key": "currentPassword",
									"value": "postman-test",
									"type": "text"
								},
								{
									"key": "newPassword",
									"value": "postman-change",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/webapi/user/updatePassword?token={{jwt_token}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"user",
								"updatePassword"
							],
							"query": [
								{
									"key": "token",
									"value": "{{jwt_token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "updatePassword(new)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let base_url = pm.environment.get(\"base_url\");\r",
									"\r",
									"pm.sendRequest( base_url + \"/LoginAuth?username=root&password=rootrootrootroot\", function (err, response) {\r",
									"    console.log(\"pre-request script response.json()\");\r",
									"    console.log(response.json());\r",
									"    let jwt_token = response.json().token;\r",
									"\r",
									"    pm.environment.set(\"jwt_token\", jwt_token);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded;application/json",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "postman-test-1",
									"type": "text"
								},
								{
									"key": "currentPassword",
									"value": "postman-test-1",
									"type": "text"
								},
								{
									"key": "newPassword",
									"value": "postman-change",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{spring_url}}/user/updatePassword",
							"host": [
								"{{spring_url}}"
							],
							"path": [
								"user",
								"updatePassword"
							]
						}
					},
					"response": []
				},
				{
					"name": "getUsers",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let base_url = pm.environment.get(\"base_url\");\r",
									"\r",
									"pm.sendRequest( base_url + \"/LoginAuth?username=root&password=rootrootrootroot\", function (err, response) {\r",
									"    console.log(\"pre-request script response.json()\");\r",
									"    console.log(response.json());\r",
									"    let jwt_token = response.json().token;\r",
									"\r",
									"    pm.environment.set(\"jwt_token\", jwt_token);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/webapi/user/getUsers?token={{jwt_token}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"user",
								"getUsers"
							],
							"query": [
								{
									"key": "token",
									"value": "{{jwt_token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getUsers(new)",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{spring_url}}/user/getUsers",
							"host": [
								"{{spring_url}}"
							],
							"path": [
								"user",
								"getUsers"
							]
						}
					},
					"response": []
				},
				{
					"name": "updateStatus",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let base_url = pm.environment.get(\"base_url\");\r",
									"\r",
									"pm.sendRequest( base_url + \"/LoginAuth?username=root&password=rootrootrootroot\", function (err, response) {\r",
									"    console.log(\"pre-request script response.json()\");\r",
									"    console.log(response.json());\r",
									"    let jwt_token = response.json().token;\r",
									"\r",
									"    pm.environment.set(\"jwt_token\", jwt_token);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "postman-test",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/webapi/user/display?token={{jwt_token}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"user",
								"display"
							],
							"query": [
								{
									"key": "token",
									"value": "{{jwt_token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getGroup",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let base_url = pm.environment.get(\"base_url\");\r",
									"\r",
									"pm.sendRequest( base_url + \"/LoginAuth?username=root&password=rootrootrootroot\", function (err, response) {\r",
									"    console.log(\"pre-request script response.json()\");\r",
									"    console.log(response.json());\r",
									"    let jwt_token = response.json().token;\r",
									"\r",
									"    pm.environment.set(\"jwt_token\", jwt_token);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "postman-test",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/webapi/user/postman-test/groups?token={{jwt_token}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"user",
								"postman-test",
								"groups"
							],
							"query": [
								{
									"key": "token",
									"value": "{{jwt_token}}"
								},
								{
									"key": "username",
									"value": "postman-test",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getGroup(new) 未完成 因依賴 group",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let base_url = pm.environment.get(\"base_url\");\r",
									"\r",
									"pm.sendRequest( base_url + \"/LoginAuth?username=root&password=rootrootrootroot\", function (err, response) {\r",
									"    console.log(\"pre-request script response.json()\");\r",
									"    console.log(response.json());\r",
									"    let jwt_token = response.json().token;\r",
									"\r",
									"    pm.environment.set(\"jwt_token\", jwt_token);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "postman-test",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{spring_url}}/user/postman-test/groups",
							"host": [
								"{{spring_url}}"
							],
							"path": [
								"user",
								"postman-test",
								"groups"
							],
							"query": [
								{
									"key": "username",
									"value": "postman-test",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "delete user(這因為peer review 有外建 會不能刪除)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let base_url = pm.environment.get(\"base_url\");\r",
									"\r",
									"pm.sendRequest( base_url + \"/LoginAuth?username=root&password=rootrootrootroot\", function (err, response) {\r",
									"    console.log(\"pre-request script response.json()\");\r",
									"    console.log(response.json());\r",
									"    let jwt_token = response.json().token;\r",
									"\r",
									"    pm.environment.set(\"jwt_token\", jwt_token);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/webapi/user/postman-test-4?token={{jwt_token}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"user",
								"postman-test-4"
							],
							"query": [
								{
									"key": "token",
									"value": "{{jwt_token}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "conn",
			"item": [
				{
					"name": "LoginAuth",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/LoginAuth?username=root&password=rootrootrootroot",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"LoginAuth"
							],
							"query": [
								{
									"key": "username",
									"value": "root"
								},
								{
									"key": "password",
									"value": "rootrootrootroot"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "isLogin",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let base_url = pm.environment.get(\"base_url\");\r",
									"\r",
									"pm.sendRequest( base_url + \"/LoginAuth?username=root&password=rootrootrootroot\", function (err, response) {\r",
									"    console.log(\"pre-request script response.json()\");\r",
									"    console.log(response.json());\r",
									"    let jwt_token = response.json().token;\r",
									"\r",
									"    pm.environment.set(\"jwt_token\", jwt_token);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/webapi/auth/login?token={{jwt_token}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"auth",
								"login"
							],
							"query": [
								{
									"key": "token",
									"value": "{{jwt_token}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "screenShot",
			"item": [
				{
					"name": "updateURL",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "sss1",
									"type": "text"
								},
								{
									"key": "assignmentName",
									"value": "hhh9",
									"type": "text"
								},
								{
									"key": "url",
									"value": "franky1",
									"type": "text"
								},
								{
									"key": "url",
									"value": "franky2",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/webapi/commits/screenshot/updateURL",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"commits",
								"screenshot",
								"updateURL"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Service",
			"item": [
				{
					"name": "Auth.login",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "token",
									"value": "sdfad",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/webapi/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"auth",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "CommitRecord",
			"item": [
				{
					"name": "[ No need JWT ] UpdateCommitResult",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "user",
									"value": "D002",
									"type": "text"
								},
								{
									"key": "proName",
									"value": "1234",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/webapi/commits/update",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"commits",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "getScreenshotURL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let base_url = pm.environment.get(\"base_url\");\r",
									"\r",
									"pm.sendRequest( base_url + \"/LoginAuth?username=root&password=rootrootrootroot\", function (err, response) {\r",
									"    console.log(\"pre-request script response.json()\");\r",
									"    console.log(response.json());\r",
									"    let jwt_token = response.json().token;\r",
									"\r",
									"    pm.environment.set(\"jwt_token\", jwt_token);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/webapi/commits/screenshot/getScreenshotURL?username=sss1&assignmentName=hhh2&commitNumber=1&token={{jwt_token}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"commits",
								"screenshot",
								"getScreenshotURL"
							],
							"query": [
								{
									"key": "username",
									"value": "sss1"
								},
								{
									"key": "assignmentName",
									"value": "hhh2"
								},
								{
									"key": "commitNumber",
									"value": "1"
								},
								{
									"key": "token",
									"value": "{{jwt_token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "partCommitRecords",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let base_url = pm.environment.get(\"base_url\");\r",
									"\r",
									"pm.sendRequest( base_url + \"/LoginAuth?username=root&password=rootrootrootroot\", function (err, response) {\r",
									"    console.log(\"pre-request script response.json()\");\r",
									"    console.log(response.json());\r",
									"    let jwt_token = response.json().token;\r",
									"\r",
									"    pm.environment.set(\"jwt_token\", jwt_token);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/webapi/commits/partCommitRecords?username=apiTest&assignmentName=rrr1&currentPage=1&token={{jwt_token}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"commits",
								"partCommitRecords"
							],
							"query": [
								{
									"key": "username",
									"value": "apiTest"
								},
								{
									"key": "assignmentName",
									"value": "rrr1"
								},
								{
									"key": "currentPage",
									"value": "1"
								},
								{
									"key": "token",
									"value": "{{jwt_token}}"
								}
							]
						},
						"description": "get one student a part of commit record "
					},
					"response": []
				},
				{
					"name": "partCommitRecord(new)",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{spring_url}}/commits/partCommitRecords?username=apiTest&assignmentName=rrr1&currentPage=1",
							"host": [
								"{{spring_url}}"
							],
							"path": [
								"commits",
								"partCommitRecords"
							],
							"query": [
								{
									"key": "username",
									"value": "apiTest"
								},
								{
									"key": "assignmentName",
									"value": "rrr1"
								},
								{
									"key": "currentPage",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "gitLab",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let base_url = pm.environment.get(\"base_url\");\r",
									"\r",
									"pm.sendRequest( base_url + \"/LoginAuth?username=root&password=rootrootrootroot\", function (err, response) {\r",
									"    console.log(\"pre-request script response.json()\");\r",
									"    console.log(response.json());\r",
									"    let jwt_token = response.json().token;\r",
									"\r",
									"    pm.environment.set(\"jwt_token\", jwt_token);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/webapi/commits/gitLab?username=apiTest&assignmentName=rrr1&token={{jwt_token}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"commits",
								"gitLab"
							],
							"query": [
								{
									"key": "username",
									"value": "apiTest"
								},
								{
									"key": "assignmentName",
									"value": "rrr1"
								},
								{
									"key": "token",
									"value": "{{jwt_token}}"
								}
							]
						},
						"description": "get git lab url"
					},
					"response": []
				},
				{
					"name": "gitLab(new)",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{spring_url}}/commits/gitLab?username=apiTest&assignmentName=hhh5",
							"host": [
								"{{spring_url}}"
							],
							"path": [
								"commits",
								"gitLab"
							],
							"query": [
								{
									"key": "username",
									"value": "apiTest"
								},
								{
									"key": "assignmentName",
									"value": "hhh5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getAssignmentFeedback",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let base_url = pm.environment.get(\"base_url\");\r",
									"\r",
									"pm.sendRequest( base_url + \"/LoginAuth?username=root&password=rootrootrootroot\", function (err, response) {\r",
									"    console.log(\"pre-request script response.json()\");\r",
									"    console.log(response.json());\r",
									"    let jwt_token = response.json().token;\r",
									"\r",
									"    pm.environment.set(\"jwt_token\", jwt_token);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/webapi/commits/feedback?username=apiTest&assignmentName=rrr1&number=1&token={{jwt_token}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"commits",
								"feedback"
							],
							"query": [
								{
									"key": "username",
									"value": "apiTest"
								},
								{
									"key": "assignmentName",
									"value": "rrr1"
								},
								{
									"key": "number",
									"value": "1"
								},
								{
									"key": "token",
									"value": "{{jwt_token}}"
								}
							]
						},
						"description": "get assignment feedback"
					},
					"response": []
				},
				{
					"name": "getAllStudentCommitRecord",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let base_url = pm.environment.get(\"base_url\");\r",
									"\r",
									"pm.sendRequest( base_url + \"/LoginAuth?username=root&password=rootrootrootroot\", function (err, response) {\r",
									"    console.log(\"pre-request script response.json()\");\r",
									"    console.log(response.json());\r",
									"    let jwt_token = response.json().token;\r",
									"\r",
									"    pm.environment.set(\"jwt_token\", jwt_token);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/webapi/commits/allUsers?token={{jwt_token}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"commits",
								"allUsers"
							],
							"query": [
								{
									"key": "token",
									"value": "{{jwt_token}}"
								}
							]
						},
						"description": "get all user last commit status"
					},
					"response": []
				},
				{
					"name": "[ Useless ] oneUser",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let base_url = pm.environment.get(\"base_url\");\r",
									"\r",
									"pm.sendRequest( base_url + \"/LoginAuth?username=root&password=rootrootrootroot\", function (err, response) {\r",
									"    console.log(\"pre-request script response.json()\");\r",
									"    console.log(response.json());\r",
									"    let jwt_token = response.json().token;\r",
									"\r",
									"    pm.environment.set(\"jwt_token\", jwt_token);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/webapi/commits/oneUser?username=apiTest&token={{jwt_token}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"commits",
								"oneUser"
							],
							"query": [
								{
									"key": "username",
									"value": "apiTest"
								},
								{
									"key": "token",
									"value": "{{jwt_token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "autoAssessment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let base_url = pm.environment.get(\"base_url\");\r",
									"\r",
									"pm.sendRequest( base_url + \"/LoginAuth?username=root&password=rootrootrootroot\", function (err, response) {\r",
									"    console.log(\"pre-request script response.json()\");\r",
									"    console.log(response.json());\r",
									"    let jwt_token = response.json().token;\r",
									"\r",
									"    pm.environment.set(\"jwt_token\", jwt_token);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/webapi/commits/autoAssessment?username=apiTest&token={{jwt_token}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"commits",
								"autoAssessment"
							],
							"query": [
								{
									"key": "username",
									"value": "apiTest"
								},
								{
									"key": "token",
									"value": "{{jwt_token}}"
								}
							]
						},
						"description": "get autoAssessment"
					},
					"response": []
				},
				{
					"name": "autoAssessment(new)",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{spring_url}}/commits/autoAssessment?username=apiTest",
							"host": [
								"{{spring_url}}"
							],
							"path": [
								"commits",
								"autoAssessment"
							],
							"query": [
								{
									"key": "username",
									"value": "apiTest"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GroupCommitRecord",
			"item": [
				{
					"name": "groupsCommit",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let base_url = pm.environment.get(\"base_url\");\r",
									"\r",
									"pm.sendRequest( base_url + \"/LoginAuth?username=root&password=rootrootrootroot\", function (err, response) {\r",
									"    console.log(\"pre-request script response.json()\");\r",
									"    console.log(response.json());\r",
									"    let jwt_token = response.json().token;\r",
									"\r",
									"    pm.environment.set(\"jwt_token\", jwt_token);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/webapi/groups/commits?token={{jwt_token}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"groups",
								"commits"
							],
							"query": [
								{
									"key": "token",
									"value": "{{jwt_token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "userGroupCommit",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let base_url = pm.environment.get(\"base_url\");\r",
									"\r",
									"pm.sendRequest( base_url + \"/LoginAuth?username=root&password=rootrootrootroot\", function (err, response) {\r",
									"    console.log(\"pre-request script response.json()\");\r",
									"    console.log(response.json());\r",
									"    let jwt_token = response.json().token;\r",
									"\r",
									"    pm.environment.set(\"jwt_token\", jwt_token);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/webapi/groups/postman-test-1/commits?token={{jwt_token}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"groups",
								"postman-test-1",
								"commits"
							],
							"query": [
								{
									"key": "token",
									"value": "{{jwt_token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getAllCommitRecordOfOneStudent",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let base_url = pm.environment.get(\"base_url\");\r",
									"\r",
									"pm.sendRequest( base_url + \"/LoginAuth?username=root&password=rootrootrootroot\", function (err, response) {\r",
									"    console.log(\"pre-request script response.json()\");\r",
									"    console.log(response.json());\r",
									"    let jwt_token = response.json().token;\r",
									"\r",
									"    pm.environment.set(\"jwt_token\", jwt_token);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/webapi/groups/postman-test-1/commits/result?token={{jwt_token}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"groups",
								"postman-test-1",
								"commits",
								"result"
							],
							"query": [
								{
									"key": "token",
									"value": "{{jwt_token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getGroupPartCommitRecord",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let base_url = pm.environment.get(\"base_url\");\r",
									"\r",
									"pm.sendRequest( base_url + \"/LoginAuth?username=root&password=rootrootrootroot\", function (err, response) {\r",
									"    console.log(\"pre-request script response.json()\");\r",
									"    console.log(response.json());\r",
									"    let jwt_token = response.json().token;\r",
									"\r",
									"    pm.environment.set(\"jwt_token\", jwt_token);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/webapi/groups/testGP02/projects/testGP02/partCommits/1?token={{jwt_token}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"groups",
								"testGP02",
								"projects",
								"testGP02",
								"partCommits",
								"1"
							],
							"query": [
								{
									"key": "token",
									"value": "{{jwt_token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getGroupCommitRecord",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let base_url = pm.environment.get(\"base_url\");\r",
									"\r",
									"pm.sendRequest( base_url + \"/LoginAuth?username=root&password=rootrootrootroot\", function (err, response) {\r",
									"    console.log(\"pre-request script response.json()\");\r",
									"    console.log(response.json());\r",
									"    let jwt_token = response.json().token;\r",
									"\r",
									"    pm.environment.set(\"jwt_token\", jwt_token);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/webapi/groups/testGP02/projects/testGP02/commits?token={{jwt_token}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"groups",
								"testGP02",
								"projects",
								"testGP02",
								"commits"
							],
							"query": [
								{
									"key": "token",
									"value": "{{jwt_token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getGroupFeedback",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/webapi/groups/testGP02/projects/testGP02/feedback/1?token={{jwt_token}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"groups",
								"testGP02",
								"projects",
								"testGP02",
								"feedback",
								"1"
							],
							"query": [
								{
									"key": "token",
									"value": "{{jwt_token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[ change to public api ]updateGroupCommit",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": ""
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GroupService",
			"item": [
				{
					"name": "createGroup(List 有問題 不會加入成員)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let base_url = pm.environment.get(\"base_url\");\r",
									"\r",
									"pm.sendRequest( base_url + \"/LoginAuth?username=root&password=rootrootrootroot\", function (err, response) {\r",
									"    console.log(\"pre-request script response.json()\");\r",
									"    console.log(response.json());\r",
									"    let jwt_token = response.json().token;\r",
									"\r",
									"    pm.environment.set(\"jwt_token\", jwt_token);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "g-test-6",
									"type": "text"
								},
								{
									"key": "leader",
									"value": "postman-test-1",
									"type": "text"
								},
								{
									"key": "member",
									"value": "postman-test-1, postman-test-2",
									"type": "text"
								},
								{
									"key": "member[]",
									"value": "postman-test-2",
									"type": "text",
									"disabled": true
								},
								{
									"key": "projectType",
									"value": "maven",
									"type": "text"
								},
								{
									"key": "projectName",
									"value": "g-test-6",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/webapi/groups?token={{jwt_token}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"groups"
							],
							"query": [
								{
									"key": "token",
									"value": "{{jwt_token}}"
								}
							]
						},
						"description": "create assinment"
					},
					"response": []
				},
				{
					"name": "getGroup",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let base_url = pm.environment.get(\"base_url\");",
									"",
									"pm.sendRequest( base_url + \"/LoginAuth?username=root&password=rootrootrootroot\", function (err, response) {",
									"    console.log(\"pre-request script response.json()\");",
									"    console.log(response.json());",
									"    let jwt_token = response.json().token;",
									"",
									"    pm.environment.set(\"jwt_token\", jwt_token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/webapi/groups/testGP02?token={{jwt_token}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"groups",
								"testGP02"
							],
							"query": [
								{
									"key": "token",
									"value": "{{jwt_token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getGroup(new)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let base_url = pm.environment.get(\"base_url\");",
									"",
									"pm.sendRequest( base_url + \"/LoginAuth?username=root&password=rootrootrootroot\", function (err, response) {",
									"    console.log(\"pre-request script response.json()\");",
									"    console.log(response.json());",
									"    let jwt_token = response.json().token;",
									"",
									"    pm.environment.set(\"jwt_token\", jwt_token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{spring_url}}/groups/testGP02",
							"host": [
								"{{spring_url}}"
							],
							"path": [
								"groups",
								"testGP02"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ImageService",
			"item": [
				{
					"name": "uploadImageToTemp-備註:ckCsrfToken 沒用到 且在windows系統下這API不好測試, 因為檔案會存到 /temp_images 資料夾下",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let base_url = pm.environment.get(\"base_url\");\r",
									"\r",
									"pm.sendRequest( base_url + \"/LoginAuth?username=root&password=rootrootrootroot\", function (err, response) {\r",
									"    console.log(\"pre-request script response.json()\");\r",
									"    console.log(response.json());\r",
									"    let jwt_token = response.json().token;\r",
									"\r",
									"    pm.environment.set(\"jwt_token\", jwt_token);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "upload",
									"type": "file",
									"src": "/C:/Users/franky/Pictures/20200704002959.jpg"
								},
								{
									"key": "ckCsrfToken",
									"value": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/webapi/image?token={{jwt_token}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"image"
							],
							"query": [
								{
									"key": "token",
									"value": "{{jwt_token}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Assignment",
			"item": [
				{
					"name": "getAssignmentOrder(先不改)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let base_url = pm.environment.get(\"base_url\");\r",
									"\r",
									"pm.sendRequest( base_url + \"/LoginAuth?username=root&password=rootrootrootroot\", function (err, response) {\r",
									"    console.log(\"pre-request script response.json()\");\r",
									"    console.log(response.json());\r",
									"    let jwt_token = response.json().token;\r",
									"\r",
									"    pm.environment.set(\"jwt_token\", jwt_token);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{base_url}}/webapi/assignment/getAssignmentOrder?fileName=hhh5&token={{jwt_token}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"assignment",
								"getAssignmentOrder"
							],
							"query": [
								{
									"key": "fileName",
									"value": "hhh5"
								},
								{
									"key": "token",
									"value": "{{jwt_token}}"
								}
							]
						},
						"description": "get auto assessment assignment judge order"
					},
					"response": []
				},
				{
					"name": "[ Useless ]getTestFile",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": ""
						}
					},
					"response": []
				},
				{
					"name": "modifyAssignmentOrderFile(先不改)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let base_url = pm.environment.get(\"base_url\");\r",
									"\r",
									"pm.sendRequest( base_url + \"/LoginAuth?username=root&password=rootrootrootroot\", function (err, response) {\r",
									"    console.log(\"pre-request script response.json()\");\r",
									"    console.log(response.json());\r",
									"    let jwt_token = response.json().token;\r",
									"\r",
									"    pm.environment.set(\"jwt_token\", jwt_token);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "assignmentName",
									"value": "testMvn001",
									"type": "text"
								},
								{
									"key": "order",
									"value": "Compile Failure, Coding Style Failure, Unit Test Failure",
									"type": "text"
								},
								{
									"key": "fileRadio",
									"value": "maven",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/webapi/assignment/order?token={{jwt_token}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"assignment",
								"order"
							],
							"query": [
								{
									"key": "token",
									"value": "{{jwt_token}}"
								}
							]
						},
						"description": "modify assignment order file"
					},
					"response": []
				},
				{
					"name": "editAssignment(先不改)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let base_url = pm.environment.get(\"base_url\");\r",
									"\r",
									"pm.sendRequest( base_url + \"/LoginAuth?username=root&password=rootrootrootroot\", function (err, response) {\r",
									"    console.log(\"pre-request script response.json()\");\r",
									"    console.log(response.json());\r",
									"    let jwt_token = response.json().token;\r",
									"\r",
									"    pm.environment.set(\"jwt_token\", jwt_token);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "/C:/Users/owner/Downloads/testMvnAPI.zip"
								},
								{
									"key": "assignmentName",
									"value": "testMvnAPI",
									"type": "text"
								},
								{
									"key": "releaseTime",
									"value": "Mon, 28 Jun 2021 11:10:00 GMT",
									"type": "text"
								},
								{
									"key": "deadline",
									"value": "Mon, 28 Jun 2021 11:10:00 GMT",
									"type": "text"
								},
								{
									"key": "readMe",
									"value": "<p>testMvnAPI</p>",
									"type": "text"
								},
								{
									"key": "order",
									"value": "Compile Failure:24, Coding Style Failure:16, Unit Test Failure:60",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/webapi/assignment/edit?token={{jwt_token}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"assignment",
								"edit"
							],
							"query": [
								{
									"key": "token",
									"value": "{{jwt_token}}"
								}
							]
						},
						"description": "edit assignment settings"
					},
					"response": []
				},
				{
					"name": "getAllAssignment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let base_url = pm.environment.get(\"base_url\");\r",
									"\r",
									"pm.sendRequest( base_url + \"/LoginAuth?username=root&password=rootrootrootroot\", function (err, response) {\r",
									"    console.log(\"pre-request script response.json()\");\r",
									"    console.log(response.json());\r",
									"    let jwt_token = response.json().token;\r",
									"\r",
									"    pm.environment.set(\"jwt_token\", jwt_token);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/webapi/assignment/getAllAssignments?token={{jwt_token}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"assignment",
								"getAllAssignments"
							],
							"query": [
								{
									"key": "token",
									"value": "{{jwt_token}}"
								}
							]
						},
						"description": "get all assignment"
					},
					"response": []
				},
				{
					"name": "getAllAssignment(new)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{spring_url}}/assignment/getAllAssignments",
							"host": [
								"{{spring_url}}"
							],
							"path": [
								"assignment",
								"getAllAssignments"
							]
						},
						"description": "get all assignment"
					},
					"response": []
				},
				{
					"name": "deleteAssignment(先不改)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let base_url = pm.environment.get(\"base_url\");\r",
									"\r",
									"pm.sendRequest( base_url + \"/LoginAuth?username=root&password=rootrootrootroot\", function (err, response) {\r",
									"    console.log(\"pre-request script response.json()\");\r",
									"    console.log(response.json());\r",
									"    let jwt_token = response.json().token;\r",
									"\r",
									"    pm.environment.set(\"jwt_token\", jwt_token);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "assignmentName",
									"value": "testMvnAPI",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/webapi/assignment/delete?token={{jwt_token}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"assignment",
								"delete"
							],
							"query": [
								{
									"key": "token",
									"value": "{{jwt_token}}"
								}
							]
						},
						"description": "delete assignment"
					},
					"response": []
				},
				{
					"name": "createAssignment(web版)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let base_url = pm.environment.get(\"base_url\");\r",
									"\r",
									"pm.sendRequest( base_url + \"/LoginAuth?username=root&password=rootrootrootroot\", function (err, response) {\r",
									"    console.log(\"pre-request script response.json()\");\r",
									"    console.log(response.json());\r",
									"    let jwt_token = response.json().token;\r",
									"\r",
									"    pm.environment.set(\"jwt_token\", jwt_token);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "assignmentName",
									"value": "postman-test-web",
									"type": "text"
								},
								{
									"key": "releaseTime",
									"value": "Mon, 28 Jun 2021 04:53:00 GMT",
									"type": "text"
								},
								{
									"key": "deadline",
									"value": "Mon, 28 Jun 2022 04:53:00 GMT",
									"type": "text"
								},
								{
									"key": "readMe",
									"value": "<p>postman-test</p>",
									"type": "text"
								},
								{
									"key": "fileRadio",
									"value": "web",
									"type": "text"
								},
								{
									"key": "file",
									"type": "file",
									"src": "/C:/D/245lab/ProgEdu/code/ProgEdu/doc/WebAssessmentForTest.zip"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/webapi/assignment/create?token={{jwt_token}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"assignment",
								"create"
							],
							"query": [
								{
									"key": "token",
									"value": "{{jwt_token}}"
								}
							]
						},
						"description": "create assinment"
					},
					"response": []
				},
				{
					"name": "createAssignment(web版)(new)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let base_url = pm.environment.get(\"base_url\");\r",
									"\r",
									"pm.sendRequest( base_url + \"/LoginAuth?username=root&password=rootrootrootroot\", function (err, response) {\r",
									"    console.log(\"pre-request script response.json()\");\r",
									"    console.log(response.json());\r",
									"    let jwt_token = response.json().token;\r",
									"\r",
									"    pm.environment.set(\"jwt_token\", jwt_token);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "assignmentName",
									"value": "postman-new3-web",
									"type": "text"
								},
								{
									"key": "releaseTime",
									"value": "Mon, 28 Jun 2021 04:53:00 GMT",
									"type": "text"
								},
								{
									"key": "deadline",
									"value": "Mon, 28 Jun 2022 04:53:00 GMT",
									"type": "text"
								},
								{
									"key": "readMe",
									"value": "<p>postman-new3</p>",
									"type": "text"
								},
								{
									"key": "fileRadio",
									"value": "web",
									"type": "text"
								},
								{
									"key": "file",
									"type": "file",
									"src": "/C:/D/245lab/ProgEdu/code/ProgEdu/doc/WebAssessmentForTest.zip"
								}
							]
						},
						"url": {
							"raw": "{{spring_url}}/assignment/create",
							"host": [
								"{{spring_url}}"
							],
							"path": [
								"assignment",
								"create"
							]
						},
						"description": "create assinment"
					},
					"response": []
				},
				{
					"name": "createAutoAssessmentAssignment(maven版)(先不改)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let base_url = pm.environment.get(\"base_url\");\r",
									"\r",
									"pm.sendRequest( base_url + \"/LoginAuth?username=root&password=rootrootrootroot\", function (err, response) {\r",
									"    console.log(\"pre-request script response.json()\");\r",
									"    console.log(response.json());\r",
									"    let jwt_token = response.json().token;\r",
									"\r",
									"    pm.environment.set(\"jwt_token\", jwt_token);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "assignmentName",
									"value": "testMvn002",
									"type": "text"
								},
								{
									"key": "releaseTime",
									"value": "Mon, 28 Jun 2021 04:53:00 GMT",
									"type": "text"
								},
								{
									"key": "deadline",
									"value": "Mon, 28 Jun 2021 04:53:00 GMT",
									"type": "text"
								},
								{
									"key": "readMe",
									"value": "<p>testMvn002</p>",
									"type": "text"
								},
								{
									"key": "fileRadio",
									"value": "maven",
									"type": "text"
								},
								{
									"key": "file",
									"type": "file",
									"src": "/C:/Users/owner/Downloads/testMvn005.zip"
								},
								{
									"key": "order",
									"value": "Compile Failure:20, Coding Style Failure:20, Unit Test Failure:60",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/webapi/assignment/autoAssessment/create?token={{jwt_token}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"assignment",
								"autoAssessment",
								"create"
							],
							"query": [
								{
									"key": "token",
									"value": "{{jwt_token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "createPeerReviewAssignment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let base_url = pm.environment.get(\"base_url\");\r",
									"\r",
									"pm.sendRequest( base_url + \"/LoginAuth?username=root&password=rootrootrootroot\", function (err, response) {\r",
									"    console.log(\"pre-request script response.json()\");\r",
									"    console.log(response.json());\r",
									"    let jwt_token = response.json().token;\r",
									"\r",
									"    pm.environment.set(\"jwt_token\", jwt_token);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "assignmentName",
									"value": "tsetPeer02",
									"type": "text"
								},
								{
									"key": "releaseTime",
									"value": "Mon, 28 Jun 2021 05:08:00 GMT",
									"type": "text"
								},
								{
									"key": "deadline",
									"value": "Mon, 28 Jun 2021 05:08:00 GMT",
									"type": "text"
								},
								{
									"key": "readMe",
									"value": "<p>testPeer02</p>",
									"type": "text"
								},
								{
									"key": "fileRadio",
									"value": "web",
									"type": "text"
								},
								{
									"key": "file",
									"type": "file",
									"src": "/C:/D/245lab/ProgEdu/code/ProgEdu/doc/WebAssessmentForTest.zip"
								},
								{
									"key": "amount",
									"value": "1",
									"type": "text"
								},
								{
									"key": "reviewStartTime",
									"value": "Mon, 28 Jun 2021 05:08:00 GMT",
									"type": "text"
								},
								{
									"key": "reviewEndTime",
									"value": "Mon, 28 Jun 2022 05:08:00 GMT",
									"type": "text"
								},
								{
									"key": "metrics",
									"value": "1,2,4",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/webapi/assignment/peerReview/create?token={{jwt_token}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"assignment",
								"peerReview",
								"create"
							],
							"query": [
								{
									"key": "token",
									"value": "{{jwt_token}}"
								}
							]
						},
						"description": "create peer review assignemnt"
					},
					"response": []
				},
				{
					"name": "createPeerReviewAssignment(new)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "assignmentName",
									"value": "tsetPeer03",
									"type": "text"
								},
								{
									"key": "releaseTime",
									"value": "Mon, 28 Jun 2021 05:08:00 GMT",
									"type": "text"
								},
								{
									"key": "deadline",
									"value": "Mon, 28 Jun 2021 05:08:00 GMT",
									"type": "text"
								},
								{
									"key": "readMe",
									"value": "<p>tsetPeer03</p>",
									"type": "text"
								},
								{
									"key": "fileRadio",
									"value": "web",
									"type": "text"
								},
								{
									"key": "file",
									"type": "file",
									"src": "/C:/D/245lab/ProgEdu/code/ProgEdu/doc/WebAssessmentForTest.zip"
								},
								{
									"key": "amount",
									"value": "1",
									"type": "text"
								},
								{
									"key": "reviewStartTime",
									"value": "Mon, 28 Jun 2021 05:08:00 GMT",
									"type": "text"
								},
								{
									"key": "reviewEndTime",
									"value": "Mon, 28 Jun 2022 05:08:00 GMT",
									"type": "text"
								},
								{
									"key": "metrics",
									"value": "1,2,4",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{spring_url}}/assignment/peerReview/create",
							"host": [
								"{{spring_url}}"
							],
							"path": [
								"assignment",
								"peerReview",
								"create"
							]
						},
						"description": "create peer review assignemnt"
					},
					"response": []
				},
				{
					"name": "getAllPeerReviewAssignment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let base_url = pm.environment.get(\"base_url\");\r",
									"\r",
									"pm.sendRequest( base_url + \"/LoginAuth?username=root&password=rootrootrootroot\", function (err, response) {\r",
									"    console.log(\"pre-request script response.json()\");\r",
									"    console.log(response.json());\r",
									"    let jwt_token = response.json().token;\r",
									"\r",
									"    pm.environment.set(\"jwt_token\", jwt_token);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/webapi/assignment/peerReview/allAssignment?token={{jwt_token}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"assignment",
								"peerReview",
								"allAssignment"
							],
							"query": [
								{
									"key": "token",
									"value": "{{jwt_token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getAllPeerReviewAssignment(new)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{spring_url}}/assignment/peerReview/allAssignment",
							"host": [
								"{{spring_url}}"
							],
							"path": [
								"assignment",
								"peerReview",
								"allAssignment"
							]
						}
					},
					"response": []
				},
				{
					"name": "getAllAutoAssessmentAssignment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let base_url = pm.environment.get(\"base_url\");\r",
									"\r",
									"pm.sendRequest( base_url + \"/LoginAuth?username=root&password=rootrootrootroot\", function (err, response) {\r",
									"    console.log(\"pre-request script response.json()\");\r",
									"    console.log(response.json());\r",
									"    let jwt_token = response.json().token;\r",
									"\r",
									"    pm.environment.set(\"jwt_token\", jwt_token);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/webapi/assignment/autoAssessment/allAssignment?token={{jwt_token}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"assignment",
								"autoAssessment",
								"allAssignment"
							],
							"query": [
								{
									"key": "token",
									"value": "{{jwt_token}}"
								}
							]
						},
						"description": "get all auto assessment assignment"
					},
					"response": []
				},
				{
					"name": "getAllAutoAssessmentAssignment(new)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{spring_url}}/assignment/autoAssessment/allAssignment",
							"host": [
								"{{spring_url}}"
							],
							"path": [
								"assignment",
								"autoAssessment",
								"allAssignment"
							]
						},
						"description": "get all auto assessment assignment"
					},
					"response": []
				},
				{
					"name": "getAssignmentDescription",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let base_url = pm.environment.get(\"base_url\");\r",
									"\r",
									"pm.sendRequest( base_url + \"/LoginAuth?username=root&password=rootrootrootroot\", function (err, response) {\r",
									"    console.log(\"pre-request script response.json()\");\r",
									"    console.log(response.json());\r",
									"    let jwt_token = response.json().token;\r",
									"\r",
									"    pm.environment.set(\"jwt_token\", jwt_token);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/webapi/assignment/getAssignment?assignmentName=postman-new3-web&token={{jwt_token}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"assignment",
								"getAssignment"
							],
							"query": [
								{
									"key": "assignmentName",
									"value": "postman-new3-web"
								},
								{
									"key": "token",
									"value": "{{jwt_token}}"
								}
							]
						},
						"description": "get assignment description"
					},
					"response": []
				},
				{
					"name": "getAssignmentDescription(new)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{spring_url}}/assignment/getAssignment?assignmentName=postman-new3-web",
							"host": [
								"{{spring_url}}"
							],
							"path": [
								"assignment",
								"getAssignment"
							],
							"query": [
								{
									"key": "assignmentName",
									"value": "postman-new3-web"
								}
							]
						},
						"description": "get assignment description"
					},
					"response": []
				},
				{
					"name": "getAssignmentFile(有錯 這還拿不了檔案)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let base_url = pm.environment.get(\"base_url\");\r",
									"\r",
									"pm.sendRequest( base_url + \"/LoginAuth?username=root&password=rootrootrootroot\", function (err, response) {\r",
									"    console.log(\"pre-request script response.json()\");\r",
									"    console.log(response.json());\r",
									"    let jwt_token = response.json().token;\r",
									"\r",
									"    pm.environment.set(\"jwt_token\", jwt_token);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/webapi/assignment/getAssignmentFile?fileName=hhh5&token={{jwt_token}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"assignment",
								"getAssignmentFile"
							],
							"query": [
								{
									"key": "fileName",
									"value": "hhh5"
								},
								{
									"key": "token",
									"value": "{{jwt_token}}"
								}
							]
						},
						"description": "get assignment file"
					},
					"response": []
				}
			]
		},
		{
			"name": "ChartService",
			"item": []
		},
		{
			"name": "jenkinsAPI",
			"item": [
				{
					"name": "Jenkins_Jobs without parameters",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "user",
								"value": "admin:admin",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "http://admin:11b603a456a4f441b2f14dcef8ccd77513@140.134.26.63:55004/job/sss2_hhh5/build",
							"protocol": "http",
							"auth": {
								"user": "admin",
								"password": "11b603a456a4f441b2f14dcef8ccd77513"
							},
							"host": [
								"140",
								"134",
								"26",
								"63"
							],
							"port": "55004",
							"path": [
								"job",
								"sss2_hhh5",
								"build"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Jenkins_2",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://admin:11b603a456a4f441b2f14dcef8ccd77513@140.134.26.63:55004/job/sss2_hhh5/build",
							"protocol": "http",
							"auth": {
								"user": "admin",
								"password": "11b603a456a4f441b2f14dcef8ccd77513"
							},
							"host": [
								"140",
								"134",
								"26",
								"63"
							],
							"port": "55004",
							"path": [
								"job",
								"sss2_hhh5",
								"build"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "MyResource",
			"item": [
				{
					"name": "MyResource",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let base_url = pm.environment.get(\"base_url\");\r",
									"\r",
									"pm.sendRequest( base_url + \"/LoginAuth?username=root&password=rootrootrootroot\", function (err, response) {\r",
									"    console.log(\"pre-request script response.json()\");\r",
									"    console.log(response.json());\r",
									"    let jwt_token = response.json().token;\r",
									"\r",
									"    pm.environment.set(\"jwt_token\", jwt_token);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/webapi/myresource?token={{jwt_token}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"myresource"
							],
							"query": [
								{
									"key": "token",
									"value": "{{jwt_token}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "other",
			"item": [
				{
					"name": "downloadAPI",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/downloadApi/peerReview/sourceCode?username=sss2&assignmentName=rrr4",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"downloadApi",
								"peerReview",
								"sourceCode"
							],
							"query": [
								{
									"key": "username",
									"value": "sss2"
								},
								{
									"key": "assignmentName",
									"value": "rrr4"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "update_commits",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "user",
									"value": "12",
									"type": "text"
								},
								{
									"key": "proName",
									"value": "12",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/update/commits",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"update",
								"commits"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "PeerReview",
			"item": [
				{
					"name": "getReviewStatus",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let base_url = pm.environment.get(\"base_url\");",
									"",
									"pm.sendRequest( base_url + \"/LoginAuth?username=root&password=rootrootrootroot\", function (err, response) {",
									"    console.log(\"pre-request script response.json()\");",
									"    console.log(response.json());",
									"    let jwt_token = response.json().token;",
									"",
									"    pm.environment.set(\"jwt_token\", jwt_token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/webapi/peerReview/status/oneUser?username=D1234567&token={{jwt_token}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"peerReview",
								"status",
								"oneUser"
							],
							"query": [
								{
									"key": "username",
									"value": "D1234567"
								},
								{
									"key": "token",
									"value": "{{jwt_token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getReviewStatus(new)",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{spring_url}}/peerReview/status/oneUser?username=D1234567",
							"host": [
								"{{spring_url}}"
							],
							"path": [
								"peerReview",
								"status",
								"oneUser"
							],
							"query": [
								{
									"key": "username",
									"value": "D1234567"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "127.0.0.1:8080"
		}
	]
}